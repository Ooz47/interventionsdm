<?php
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Menu\MenuLinkManagerInterface;
use Drupal\devel\Plugin\Devel\Dumper\Kint;
use Kint\Kint as KintKint;
use Drupal\Core\Url;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * @file
 * Primary module hooks for interventionsdm module.
 */


/**
 * Implémente hook_menu_links_discovered_alter().
 */
function interventionsdm_menu_links_discovered_alter(&$links) {
    // Détermine les chemins de menu à masquer pour les webmasters.
    $paths_to_hide = [
      'system.admin_index',
      'entity.taxonomy_vocabulary.add_form',
      'entity.taxonomy_vocabulary.edit_form',
      'entity.taxonomy_vocabulary.delete_form',
      // Ajoute ici d'autres liens internes (route names), pas les paths bruts.
    ];

    
    $current_user = \Drupal::currentUser();
    // kint_dump($current_user);
    // kint_dump($current_user->getRoles());
    // Si l'utilisateur est connecté et a le rôle 'webmaster'.
    if ($current_user->isAuthenticated() && in_array('webmaster', $current_user->getRoles())) {
      foreach ($paths_to_hide as $route_name) {
        foreach ($links as $key => $link) {
          if ((isset($link['route_name'])) && ($link['route_name'] === $route_name)) {
            // Supprime le lien du menu.
            unset($links[$key]);
          }
        }
      }
    }
  }

  function interventionsdm_page_attachments(array &$attachments) {
    
    $current_user = \Drupal::currentUser();
    // dsm($current_user);
    // kint("paths_to_hide");
    if (in_array('webmaster', $current_user->getRoles())) {
      $route_name = \Drupal::routeMatch()->getRouteName();
      $attachments['#attached']['html_head'][] = [
        [
          '#tag' => 'script',
          '#value' => "console.log('ROUTE: $route_name');",
        ],
        'interventionsdm_debug_route'
      ];
    }
  }
  



/**
 * Implements hook_menu_local_tasks_alter() for Drupal 11.
 */
function interventionsdm_menu_local_tasks_alter(
  array &$data,
  string $route_name,
  RefinableCacheableDependencyInterface &$cacheability
): void {
  $current_user = \Drupal::currentUser();

  // Ne fait rien si l'utilisateur n'est pas "webmaster"
  if (!in_array('webmaster', $current_user->getRoles())) {
    return;
  }
// Kint($route_name);
  // Onglets à retirer pour les webmasters, selon le contexte de page
  $tabs_to_remove = [
    'entity.taxonomy_vocabulary.overview_form',
    'entity.user.contact_form',
    'entity.version_history:taxonomy_term.version_history',
    'entity.node.version_history',
  ];
  // Kint($data);
// Parcours de tous les onglets de niveau 0 et 1
foreach ($data['tabs'][0] ?? [] as $key => $tab) {
  
 
  if (in_array($key, $tabs_to_remove)) {
    // dsm ('yes');
    // dsm ($key);
    unset($data['tabs'][0][$key]);
  }
}

foreach ($data['tabs'][1] ?? [] as $key => $tab) {
  if (in_array($key, $tabs_to_remove)) {
    unset($data['tabs'][0][$key]);
  }
}

    // Ajoute une dépendance au contexte utilisateur pour invalider le cache
    $cacheability->addCacheContexts(['user.roles']);

}

  
function interventionsdm_menu_local_actions_alter(&$local_actions) {

    $current_user = \Drupal::currentUser();

    // Si l'utilisateur a le rôle "webmaster", on supprime l'action ciblée.
    if (in_array('webmaster', $current_user->getRoles())) {
      // Identifiant du lien d'action "Ajouter un vocabulaire"
      $action_key = 'entity.taxonomy_vocabulary.add_form';
  
      // Supprime le lien s’il existe
      if (isset($local_actions[$action_key])) {
        unset($local_actions[$action_key]);

      }
    }
}



/**
 * Attache form id  à to les form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 * @return array
 */
function atommod_attach_form_id(&$form, $form_id)
{
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    atommod_attach_form_id($form[$child], $form_id); // recurse for children
  }
}

//Modification des formulaire
function interventionsdm_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // atommod_attach_form_id($form, $form['#id']);
  // dsm($form_id);
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
  //  dsm($form);
  //  Kint($current_user);
  if (($form_id === 'user_form') || ($form_id === 'user_register_form')) {
   
    if (($current_user->hasRole('administrator')) || ($current_user->id() == '1')) {

      return;
    } else {
      if (($current_user->hasRole('webmaster'))) {
        if ($form_id === 'user_form') {
        
          $user = $form_state->getFormObject()->getEntity();
        
          if ($user->hasRole('administrator')) {
            throw new AccessDeniedHttpException();
          }
        }

        if ($form_id === 'user_register_form') {
          $form['account']['notify']['#access'] = FALSE;
        }
      } 
    }
  }
//  Kint($form_id);
 /*Gestion accès form Add et edit */
 $nodetype = array(
  "node_abecedaire_form", "node_abecedaire_edit_form",
  "node_actualit__form", "node_actualit__edit_form",
  "node_article_form", "node_article_edit_form",
  "node_documents_form", "node_documents_edit_form",
  "node_notes_de_lectures_form", "node_notes_de_lectures_edit_form",
  "node_page_form", "node_page_edit_form",
  "node_revue_de_presse_form", "node_revue_de_presse_edit_form"
);
// Kint($form_id);
if (in_array($form_id, $nodetype)) {
  $form['revision']['#access'] = FALSE;
  $form['revision_log']['#access'] = FALSE;
  // $form['simple_sitemap_index_now']['#access'] = FALSE;
  // $form['status']['#access'] = TRUE;
  // $form['comment_node_revue_de_presse']['#access'] = FALSE;
  $form['comment_node_actualit_']['#access'] = FALSE;
  $form['comment_node_article']['#access'] = FALSE;
  $form['comment_node_abecedaire']['#access'] = FALSE;
  $form['comment_node_notes_de_lectures']['#access'] = FALSE;
  $form['comment_node_documents']['#access'] = FALSE;
}

$nodetype = array(
  "comment_comment_node_abecedaire_form", "node_abecedaire_edit_form",
  "comment_comment_node_article_form", "node_actualit__edit_form",
  "comment_comment_node_article_form", "node_article_edit_form",
  "comment_comment_node_documents_form", "node_documents_edit_form",
  "comment_comment_node_notes_de_lectures_form", "node_notes_de_lectures_edit_form",
  "node_abecedaire_form", "node_page_form"
);

	  
if (in_array($form_id, $nodetype)) {
  if (!$current_user->hasRole('administrator')){
    $form['author']['#access'] = FALSE;	
  }
     }

    //  Kint($form_id);
$nodetype = array(
 "taxonomy_term_auteurs_form",
 "taxonomy_term_r_gion_territoire_pays_form",
 "taxonomy_term_th_matiques_form",
 "media_document_edit_form", "media_document_add_form",
 "media_audio_edit_form", "media_audio_add_form",
 "media_image_edit_form", "media_image_add_form",
 "media_video_edit_form", "media_video_add_form",
 "media_remote_video_edit_form", "media_remote_video_add_form",

);
// Kint($form);
if (in_array($form_id, $nodetype)) {
  $form['revision']['#access'] = FALSE;
  $form['revision_log']['#access'] = FALSE;
  $form['revision_information']['#access'] = FALSE;
  $form['relations']['#access'] = FALSE;
  // $form['simple_sitemap_index_now']['#access'] = FALSE;
  // $form['status']['#access'] = TRUE;

  if (($form_id =="taxonomy_term_thematiques_form") || ($form_id =="taxonomy_term_categories_actualites_form")) {
    $form['status']['#access'] = FALSE;
  }
}
} //FORM_ALTER


/*Remplace image texte invit�s dans page cible*/
function interventionsdm_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  // On cible uniquement le champ image du type "article"
  if (
    isset($element['#field_name']) &&
    $element['#field_name'] === 'field_media_image' &&
    $element['#bundle'] === 'article'
  ) {
    $node = $element['#object'];

    if ($node instanceof NodeInterface && $node->hasField('field_auteur')) {
      $term = $node->get('field_auteur')->first();
      
      if ($term && $term->target_id != 9) {
        // On remplace l'entité média par une autre (ex: ID 208)
        $new_media = Media::load(208);
        // Kint($variables['items'][0] );
        if ($new_media) {
          // On remplace l'élément affiché (dans #item) par celui du média cible
          // Kint($new_media );
          $variables['items'][0]['content']['#media'] = $new_media;
          // $variables['items'][0]['#item'] = $new_media->get('field_media_image')->first()->getValue();
          // $variables['items'][0]['#theme'] = 'image'; // ou 'media' selon ton render
        }
      }
    }
  }
}



/**
 * Implements hook_views_pre_render().
 */
function interventionsdm_views_pre_render(ViewExecutable $view): void {
  if (
    $view->id() === 'contenus' &&
    in_array($view->current_display, ['page_2', 'block_4', 'block_1', 'page_7'])
  ) {
    foreach ($view->result as $row) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = $row->_entity;

      if ($node instanceof \Drupal\node\NodeInterface && $node->bundle() === 'article') {
        // Vérifie si l'auteur est différent de 9
        if (
          $node->hasField('field_auteur') &&
          !$node->get('field_auteur')->isEmpty() &&
          $node->get('field_auteur')->first()->target_id != 9
        ) {
          // On remplace le média image
          $replacement_media = Media::load(208);
          if ($replacement_media && $replacement_media->hasField('field_media_image')) {
              $node->field_media_image->setValue([
                'target_id' => $replacement_media->id(),
              ]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function interventionsdm_entity_operation_alter(array &$operations, EntityInterface $entity): void {
  $current_user = \Drupal::currentUser();

  // On ne cible que les utilisateurs avec le rôle "webmaster"
  if (!in_array('webmaster', $current_user->getRoles())) {
    return;
  }

  $entity_type = $entity->getEntityTypeId();

  // Suppression des actions sur les vocabulaires
  if ($entity_type === 'taxonomy_vocabulary') {
    unset($operations['edit'], $operations['delete']);
  }

  // Suppression des actions sur les termes
  if ($entity_type === 'taxonomy_term') {
    // Supprime "Ajouter un enfant" pour tous les termes
    unset($operations['add-child']);

    // Supprime "Supprimer" uniquement pour certains vocabulaires
    $restricted_vocabularies = ['r_gion_territoire_pays', 'th_matiques'];
    if (in_array($entity->bundle(), $restricted_vocabularies)) {
      unset($operations['delete']);
    }
  }
}
