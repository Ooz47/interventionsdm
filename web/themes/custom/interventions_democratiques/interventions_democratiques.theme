<?php

declare(strict_types=1);

use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * @file
 * Functions to support theming in the Interventions democratiques theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function interventions_democratiques_preprocess_html(array &$variables): void
{

  // $view_mode = $variables;
  // Kint::dump('sds');
  // kint_dump('qdssqd','ma var');
  $node = \Drupal::routeMatch()->getParameter('node');
  // Kint($node->status);
  if ($node instanceof NodeInterface) {
    $variables['attributes']['class'][] = 'page-node page-node-' . $node->getType();
    $variables['attributes']['class'][] = 'page-node-' . $node->id();

    if ($node->status->getString() == 1) {
    } else {
      $variables['attributes']['class'][] = 'page-node-unpublished';
    }
  } else {
    $variables['attributes']['class'][] = 'page-no-node';
  }

  if ($variables['root_path'] == 'user') {
    $variables['attributes']['class'][] = 'page-user';
  }
  // Ajoute 'page-admin' si le chemin ou la route suggère une page d'administration
  $current_path = \Drupal::service('path.current')->getPath();
  // $route_name = \Drupal::routeMatch()->getRouteName();
  if (
    str_starts_with($current_path, '/admin') ||
    str_starts_with($current_path, '/node/add') ||
    str_starts_with($current_path, '/taxonomy')
  ) {
    $variables['attributes']['class'][] = 'page-admin';
  }

  $internal_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  if ($internal_path !== '/') {
    $variables['attributes']['class'][] = str_replace('/', '-', trim($internal_path, '/'));
  }

  $view = \Drupal::routeMatch()->getParameter('view_id');

  if ($view) {
    $current_path = \Drupal::service('path.current')->getPath();
    $internal_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    // Assign it to body class 
    $variables['attributes']['class'][] = str_replace("/", "", $internal_path);
  }
}


function interventions_democratiques_page_attachments_alter(array &$attachments)
{
  /**
   * Retire meta generator
   */
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] == 'system_meta_generator') {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }
  // kint_dump('Webmaster CSS hook activé','alter');
  $current_user = \Drupal::currentUser();
  if (in_array('webmaster', $current_user->getRoles())) {
    $attachments['#attached']['library'][] = 'interventions_democratiques/webmaster';
  }
}


/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function interventions_democratiques_preprocess_page(array &$variables): void {}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function interventions_democratiques_preprocess_node(array &$variables): void {}


/**
 * Implements hook_views_pre_render().
 * Hook pour mise en forme de media library
 */
function interventions_democratiques_views_pre_render(ViewExecutable $view) {
  $add_classes = function (&$option, array $classes_to_add) {
    $classes = preg_split('/\s+/', $option);
    $classes = array_filter($classes);
    $classes = array_merge($classes, $classes_to_add);
    $option = implode(' ', array_unique($classes));
  };

  if ($view->id() === 'media_library') {
    if ($view->display_handler->options['defaults']['css_class']) {
      $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view']);
    }
    else {
      $add_classes($view->display_handler->options['css_class'], ['media-library-view']);
    }

    if ($view->current_display === 'page') {
      if (array_key_exists('media_bulk_form', $view->field)) {
        $add_classes($view->field['media_bulk_form']->options['element_class'], ['media-library-item__click-to-select-checkbox']);
      }
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('edit_media', $view->field)) {
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['media-library-item__edit']);
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['icon-link']);
      }
      if (array_key_exists('delete_media', $view->field)) {
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['media-library-item__remove']);
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['icon-link']);
      }
    }
    elseif (str_starts_with($view->current_display, 'widget')) {
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('media_library_select_form', $view->field)) {
        $add_classes($view->field['media_library_select_form']->options['element_wrapper_class'], ['media-library-item__click-to-select-checkbox']);
      }

      if ($view->display_handler->options['defaults']['css_class']) {
        $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view--widget']);
      }
      else {
        $add_classes($view->display_handler->options['css_class'], ['media-library-view--widget']);
      }
    }
  }
}


function interventions_democratiques_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Ajoute le machine name du display (ex: 'page_1', 'block_5')
  $variables['display_id'] = $view->current_display;

  // Ajoute un nom CSS-safe (ex: 'page-1' au lieu de 'page_1')
  $variables['display_css'] = strtr($view->current_display, ['_' => '-']);

  // // Ajoute le titre du display (ex: 'Bloc d’actualités')
  // if (!empty($view->display_handler)) {
  //   $variables['display_title'] = $view->display_handler->getOption('display_title');
  // }
}